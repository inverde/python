Help on package arrow:

NNAAMMEE
    arrow

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    _version
    api
    arrow
    constants
    factory
    formatter
    locales
    parser
    util

CCLLAASSSSEESS
    builtins.ValueError(builtins.Exception)
        arrow.parser.ParserError
    builtins.object
        arrow.arrow.Arrow
        arrow.factory.ArrowFactory

    class AArrrrooww(builtins.object)
     |  Arrow(year: int, month: int, day: int, hour: int = 0, minute: int = 0, second: int = 0, microsecond: int = 0, tzinfo: Union[datetime.tzinfo, str, NoneType] = None, **kwargs: Any) -> None
     |
     |  An :class:`Arrow <arrow.arrow.Arrow>` object.
     |
     |  Implements the ``datetime`` interface, behaving as an aware ``datetime`` while implementing
     |  additional functionality.
     |
     |  :param year: the calendar year.
     |  :param month: the calendar month.
     |  :param day: the calendar day.
     |  :param hour: (optional) the hour. Defaults to 0.
     |  :param minute: (optional) the minute, Defaults to 0.
     |  :param second: (optional) the second, Defaults to 0.
     |  :param microsecond: (optional) the microsecond. Defaults to 0.
     |  :param tzinfo: (optional) A timezone expression.  Defaults to UTC.
     |  :param fold: (optional) 0 or 1, used to disambiguate repeated wall times. Defaults to 0.
     |
     |  .. _tz-expr:
     |
     |  Recognized timezone expressions:
     |
     |      - A ``tzinfo`` object.
     |      - A ``str`` describing a timezone, similar to 'US/Pacific', or 'Europe/Berlin'.
     |      - A ``str`` in ISO 8601 style, as in '+07:00'.
     |      - A ``str``, one of the following:  'local', 'utc', 'UTC'.
     |
     |  Usage::
     |
     |      >>> import arrow
     |      >>> arrow.Arrow(2013, 5, 5, 12, 30, 45)
     |      <Arrow [2013-05-05T12:30:45+00:00]>
     |
     |  Methods defined here:
     |
     |  ____aadddd____(self, other: Any) -> 'Arrow'
     |
     |  ____eeqq____(self, other: Any) -> bool
     |      Return self==value.
     |
     |  ____ffoorrmmaatt____(self, formatstr: str) -> str
     |      Default object formatter.
     |
     |      Return str(self) if format_spec is empty. Raise TypeError otherwise.
     |
     |  ____ggee____(self, other: Any) -> bool
     |      Return self>=value.
     |
     |  ____ggeettaattttrr____(self, name: str) -> int
     |
     |  ____ggtt____(self, other: Any) -> bool
     |      Return self>value.
     |
     |  ____hhaasshh____(self) -> int
     |      Return hash(self).
     |
     |  ____iinniitt____(self, year: int, month: int, day: int, hour: int = 0, minute: int = 0, second: int = 0, microsecond: int = 0, tzinfo: Union[datetime.tzinfo, str, NoneType] = None, **kwargs: Any) -> None
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ____llee____(self, other: Any) -> bool
     |      Return self<=value.
     |
     |  ____lltt____(self, other: Any) -> bool
     |      Return self<value.
     |
     |  ____nnee____(self, other: Any) -> bool
     |      Return self!=value.
     |
     |  ____rraadddd____(self, other: Union[datetime.timedelta, dateutil.relativedelta.relativedelta]) -> 'Arrow'
     |
     |  ____rreepprr____(self) -> str
     |      Return repr(self).
     |
     |  ____rrssuubb____(self, other: Any) -> datetime.timedelta
     |
     |  ____ssttrr____(self) -> str
     |      Return str(self).
     |
     |  ____ssuubb____(self, other: Any) -> Union[datetime.timedelta, ForwardRef('Arrow')]
     |
     |  aassttiimmeezzoonnee(self, tz: Optional[datetime.tzinfo]) -> datetime.datetime
     |      Returns a ``datetime`` object, converted to the specified timezone.
     |
     |      :param tz: a ``tzinfo`` object.
     |
     |      Usage::
     |
     |          >>> pacific=arrow.now('US/Pacific')
     |          >>> nyc=arrow.now('America/New_York').tzinfo
     |          >>> pacific.astimezone(nyc)
     |          datetime.datetime(2019, 1, 20, 10, 24, 22, 328172, tzinfo=tzfile('/usr/share/zoneinfo/America/New_York'))
     |
     |  cceeiill(self, frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters']) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, representing the "ceiling"
     |      of the timespan of the :class:`Arrow <arrow.arrow.Arrow>` object in a given timeframe.
     |      Equivalent to the second element in the 2-tuple returned by
     |      :func:`span <arrow.arrow.Arrow.span>`.
     |
     |      :param frame: the timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().ceil('hour')
     |          <Arrow [2013-05-09T03:59:59.999999+00:00]>
     |
     |  cclloonnee(self) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, cloned from the current one.
     |
     |      Usage:
     |
     |          >>> arw = arrow.utcnow()
     |          >>> cloned = arw.clone()
     |
     |  ccttiimmee(self) -> str
     |      Returns a ctime formatted representation of the date and time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().ctime()
     |          'Sat Jan 19 18:26:50 2019'
     |
     |  ddaattee(self) -> datetime.date
     |      Returns a ``date`` object with the same year, month and day.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().date()
     |          datetime.date(2019, 1, 23)
     |
     |  ddeehhuummaanniizzee(self, input_string: str, locale: str = 'en_us') -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, that represents
     |      the time difference relative to the attributes of the
     |      :class:`Arrow <arrow.arrow.Arrow>` object.
     |
     |      :param timestring: a ``str`` representing a humanized relative time.
     |      :param locale: (optional) a ``str`` specifying a locale.  Defaults to 'en-us'.
     |
     |      Usage::
     |
     |              >>> arw = arrow.utcnow()
     |              >>> arw
     |              <Arrow [2021-04-20T22:27:34.787885+00:00]>
     |              >>> earlier = arw.dehumanize("2 days ago")
     |              >>> earlier
     |              <Arrow [2021-04-18T22:27:34.787885+00:00]>
     |
     |              >>> arw = arrow.utcnow()
     |              >>> arw
     |              <Arrow [2021-04-20T22:27:34.787885+00:00]>
     |              >>> later = arw.dehumanize("in a month")
     |              >>> later
     |              <Arrow [2021-05-18T22:27:34.787885+00:00]>
     |
     |  ddsstt(self) -> Optional[datetime.timedelta]
     |      Returns the daylight savings time adjustment.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().dst()
     |          datetime.timedelta(0)
     |
     |  fflloooorr(self, frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters']) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, representing the "floor"
     |      of the timespan of the :class:`Arrow <arrow.arrow.Arrow>` object in a given timeframe.
     |      Equivalent to the first element in the 2-tuple returned by
     |      :func:`span <arrow.arrow.Arrow.span>`.
     |
     |      :param frame: the timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().floor('hour')
     |          <Arrow [2013-05-09T03:00:00+00:00]>
     |
     |  ffoorr__jjssoonn(self) -> str
     |      Serializes for the ``for_json`` protocol of simplejson.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().for_json()
     |          '2019-01-19T18:25:36.760079+00:00'
     |
     |  ffoorrmmaatt(self, fmt: str = 'YYYY-MM-DD HH:mm:ssZZ', locale: str = 'en-us') -> str
     |      Returns a string representation of the :class:`Arrow <arrow.arrow.Arrow>` object,
     |      formatted according to the provided format string.
     |
     |      :param fmt: the format string.
     |      :param locale: the locale to format.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ')
     |          '2013-05-09 03:56:47 -00:00'
     |
     |          >>> arrow.utcnow().format('X')
     |          '1368071882'
     |
     |          >>> arrow.utcnow().format('MMMM DD, YYYY')
     |          'May 09, 2013'
     |
     |          >>> arrow.utcnow().format()
     |          '2013-05-09 03:56:47 -00:00'
     |
     |  hhuummaanniizzee(self, other: Union[ForwardRef('Arrow'), datetime.datetime, NoneType] = None, locale: str = 'en-us', only_distance: bool = False, granularity: Union[Literal['auto', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'], List[Literal['auto', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']]] = 'auto') -> str
     |      Returns a localized, humanized representation of a relative difference in time.
     |
     |      :param other: (optional) an :class:`Arrow <arrow.arrow.Arrow>` or ``datetime`` object.
     |          Defaults to now in the current :class:`Arrow <arrow.arrow.Arrow>` object's timezone.
     |      :param locale: (optional) a ``str`` specifying a locale.  Defaults to 'en-us'.
     |      :param only_distance: (optional) returns only time difference eg: "11 seconds" without "in" or "ago" part.
     |      :param granularity: (optional) defines the precision of the output. Set it to strings 'second', 'minute',
     |                         'hour', 'day', 'week', 'month' or 'year' or a list of any combination of these strings
     |
     |      Usage::
     |
     |          >>> earlier = arrow.utcnow().shift(hours=-2)
     |          >>> earlier.humanize()
     |          '2 hours ago'
     |
     |          >>> later = earlier.shift(hours=4)
     |          >>> later.humanize(earlier)
     |          'in 4 hours'
     |
     |  iiss__bbeettwweeeenn(self, start: 'Arrow', end: 'Arrow', bounds: Literal['[)', '()', '(]', '[]'] = '()') -> bool
     |      Returns a boolean denoting whether the :class:`Arrow <arrow.arrow.Arrow>` object is between
     |      the start and end limits.
     |
     |      :param start: an :class:`Arrow <arrow.arrow.Arrow>` object.
     |      :param end: an :class:`Arrow <arrow.arrow.Arrow>` object.
     |      :param bounds: (optional) a ``str`` of either '()', '(]', '[)', or '[]' that specifies
     |          whether to include or exclude the start and end values in the range. '(' excludes
     |          the start, '[' includes the start, ')' excludes the end, and ']' includes the end.
     |          If the bounds are not specified, the default bound '()' is used.
     |
     |      Usage::
     |
     |          >>> start = arrow.get(datetime(2013, 5, 5, 12, 30, 10))
     |          >>> end = arrow.get(datetime(2013, 5, 5, 12, 30, 36))
     |          >>> arrow.get(datetime(2013, 5, 5, 12, 30, 27)).is_between(start, end)
     |          True
     |
     |          >>> start = arrow.get(datetime(2013, 5, 5))
     |          >>> end = arrow.get(datetime(2013, 5, 8))
     |          >>> arrow.get(datetime(2013, 5, 8)).is_between(start, end, '[]')
     |          True
     |
     |          >>> start = arrow.get(datetime(2013, 5, 5))
     |          >>> end = arrow.get(datetime(2013, 5, 8))
     |          >>> arrow.get(datetime(2013, 5, 8)).is_between(start, end, '[)')
     |          False
     |
     |  iissooccaalleennddaarr(self) -> Tuple[int, int, int]
     |      Returns a 3-tuple, (ISO year, ISO week number, ISO weekday).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().isocalendar()
     |          (2019, 3, 6)
     |
     |  iissooffoorrmmaatt(self, sep: str = 'T', timespec: str = 'auto') -> str
     |      Returns an ISO 8601 formatted representation of the date and time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().isoformat()
     |          '2019-01-19T18:30:52.442118+00:00'
     |
     |  iissoowweeeekkddaayy(self) -> int
     |      Returns the ISO day of the week as an integer (1-7).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().isoweekday()
     |          6
     |
     |  rreeppllaaccee(self, **kwargs: Any) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object with attributes updated
     |      according to inputs.
     |
     |      Use property names to set their value absolutely::
     |
     |          >>> import arrow
     |          >>> arw = arrow.utcnow()
     |          >>> arw
     |          <Arrow [2013-05-11T22:27:34.787885+00:00]>
     |          >>> arw.replace(year=2014, month=6)
     |          <Arrow [2014-06-11T22:27:34.787885+00:00]>
     |
     |      You can also replace the timezone without conversion, using a
     |      :ref:`timezone expression <tz-expr>`::
     |
     |          >>> arw.replace(tzinfo=tz.tzlocal())
     |          <Arrow [2013-05-11T22:27:34.787885-07:00]>
     |
     |  sshhiifftt(self, **kwargs: Any) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object with attributes updated
     |      according to inputs.
     |
     |      Use pluralized property names to relatively shift their current value:
     |
     |      >>> import arrow
     |      >>> arw = arrow.utcnow()
     |      >>> arw
     |      <Arrow [2013-05-11T22:27:34.787885+00:00]>
     |      >>> arw.shift(years=1, months=-1)
     |      <Arrow [2014-04-11T22:27:34.787885+00:00]>
     |
     |      Day-of-the-week relative shifting can use either Python's weekday numbers
     |      (Monday = 0, Tuesday = 1 .. Sunday = 6) or using dateutil.relativedelta's
     |      day instances (MO, TU .. SU).  When using weekday numbers, the returned
     |      date will always be greater than or equal to the starting date.
     |
     |      Using the above code (which is a Saturday) and asking it to shift to Saturday:
     |
     |      >>> arw.shift(weekday=5)
     |      <Arrow [2013-05-11T22:27:34.787885+00:00]>
     |
     |      While asking for a Monday:
     |
     |      >>> arw.shift(weekday=0)
     |      <Arrow [2013-05-13T22:27:34.787885+00:00]>
     |
     |  ssppaann(self, frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters'], count: int = 1, bounds: Literal['[)', '()', '(]', '[]'] = '[)', exact: bool = False, week_start: int = 1) -> Tuple[ForwardRef('Arrow'), ForwardRef('Arrow')]
     |      Returns a tuple of two new :class:`Arrow <arrow.arrow.Arrow>` objects, representing the timespan
     |      of the :class:`Arrow <arrow.arrow.Arrow>` object in a given timeframe.
     |
     |      :param frame: the timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |      :param count: (optional) the number of frames to span.
     |      :param bounds: (optional) a ``str`` of either '()', '(]', '[)', or '[]' that specifies
     |          whether to include or exclude the start and end values in the span. '(' excludes
     |          the start, '[' includes the start, ')' excludes the end, and ']' includes the end.
     |          If the bounds are not specified, the default bound '[)' is used.
     |      :param exact: (optional) whether to have the start of the timespan begin exactly
     |          at the time specified by ``start`` and the end of the timespan truncated
     |          so as not to extend beyond ``end``.
     |      :param week_start: (optional) only used in combination with the week timeframe. Follows isoweekday() where
     |          Monday is 1 and Sunday is 7.
     |
     |      Supported frame values: year, quarter, month, week, day, hour, minute, second.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow()
     |          <Arrow [2013-05-09T03:32:36.186203+00:00]>
     |
     |          >>> arrow.utcnow().span('hour')
     |          (<Arrow [2013-05-09T03:00:00+00:00]>, <Arrow [2013-05-09T03:59:59.999999+00:00]>)
     |
     |          >>> arrow.utcnow().span('day')
     |          (<Arrow [2013-05-09T00:00:00+00:00]>, <Arrow [2013-05-09T23:59:59.999999+00:00]>)
     |
     |          >>> arrow.utcnow().span('day', count=2)
     |          (<Arrow [2013-05-09T00:00:00+00:00]>, <Arrow [2013-05-10T23:59:59.999999+00:00]>)
     |
     |          >>> arrow.utcnow().span('day', bounds='[]')
     |          (<Arrow [2013-05-09T00:00:00+00:00]>, <Arrow [2013-05-10T00:00:00+00:00]>)
     |
     |          >>> arrow.utcnow().span('week')
     |          (<Arrow [2021-02-22T00:00:00+00:00]>, <Arrow [2021-02-28T23:59:59.999999+00:00]>)
     |
     |          >>> arrow.utcnow().span('week', week_start=6)
     |          (<Arrow [2021-02-20T00:00:00+00:00]>, <Arrow [2021-02-26T23:59:59.999999+00:00]>)
     |
     |  ssttrrffttiimmee(self, format: str) -> str
     |      Formats in the style of ``datetime.strftime``.
     |
     |      :param format: the format string.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().strftime('%d-%m-%Y %H:%M:%S')
     |          '23-01-2019 12:28:17'
     |
     |  ttiimmee(self) -> datetime.time
     |      Returns a ``time`` object with the same hour, minute, second, microsecond.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().time()
     |          datetime.time(12, 15, 34, 68352)
     |
     |  ttiimmeessttaammpp(self) -> float
     |      Returns a timestamp representation of the :class:`Arrow <arrow.arrow.Arrow>` object, in
     |      UTC time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().timestamp()
     |          1616882340.256501
     |
     |  ttiimmeettuuppllee(self) -> time.struct_time
     |      Returns a ``time.struct_time``, in the current timezone.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().timetuple()
     |          time.struct_time(tm_year=2019, tm_mon=1, tm_mday=20, tm_hour=15, tm_min=17, tm_sec=8, tm_wday=6, tm_yday=20, tm_isdst=0)
     |
     |  ttiimmeettzz(self) -> datetime.time
     |      Returns a ``time`` object with the same hour, minute, second, microsecond and
     |      tzinfo.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().timetz()
     |          datetime.time(12, 5, 18, 298893, tzinfo=tzutc())
     |
     |  ttoo(self, tz: Union[datetime.tzinfo, str]) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, converted
     |      to the target timezone.
     |
     |      :param tz: A :ref:`timezone expression <tz-expr>`.
     |
     |      Usage::
     |
     |          >>> utc = arrow.utcnow()
     |          >>> utc
     |          <Arrow [2013-05-09T03:49:12.311072+00:00]>
     |
     |          >>> utc.to('US/Pacific')
     |          <Arrow [2013-05-08T20:49:12.311072-07:00]>
     |
     |          >>> utc.to(tz.tzlocal())
     |          <Arrow [2013-05-08T20:49:12.311072-07:00]>
     |
     |          >>> utc.to('-07:00')
     |          <Arrow [2013-05-08T20:49:12.311072-07:00]>
     |
     |          >>> utc.to('local')
     |          <Arrow [2013-05-08T20:49:12.311072-07:00]>
     |
     |          >>> utc.to('local').to('utc')
     |          <Arrow [2013-05-09T03:49:12.311072+00:00]>
     |
     |  ttoooorrddiinnaall(self) -> int
     |      Returns the proleptic Gregorian ordinal of the date.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().toordinal()
     |          737078
     |
     |  uuttccooffffsseett(self) -> Optional[datetime.timedelta]
     |      Returns a ``timedelta`` object representing the whole number of minutes difference from
     |      UTC time.
     |
     |      Usage::
     |
     |          >>> arrow.now('US/Pacific').utcoffset()
     |          datetime.timedelta(-1, 57600)
     |
     |  uuttccttiimmeettuuppllee(self) -> time.struct_time
     |      Returns a ``time.struct_time``, in UTC time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().utctimetuple()
     |          time.struct_time(tm_year=2019, tm_mon=1, tm_mday=19, tm_hour=21, tm_min=41, tm_sec=7, tm_wday=5, tm_yday=19, tm_isdst=0)
     |
     |  wweeeekkddaayy(self) -> int
     |      Returns the day of the week as an integer (0-6).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().weekday()
     |          5
     |
     |  ----------------------------------------------------------------------
     |  Class methods defined here:
     |
     |  ffrroommddaattee(date: datetime.date, tzinfo: Union[datetime.tzinfo, str, NoneType] = None) -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object from a ``date`` and optional
     |      replacement timezone.  All time values are set to 0.
     |
     |      :param date: the ``date``
     |      :param tzinfo: (optional) A :ref:`timezone expression <tz-expr>`.  Defaults to UTC.
     |
     |  ffrroommddaatteettiimmee(dt: datetime.datetime, tzinfo: Union[datetime.tzinfo, str, NoneType] = None) -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object from a ``datetime`` and
     |      optional replacement timezone.
     |
     |      :param dt: the ``datetime``
     |      :param tzinfo: (optional) A :ref:`timezone expression <tz-expr>`.  Defaults to ``dt``'s
     |          timezone, or UTC if naive.
     |
     |      Usage::
     |
     |          >>> dt
     |          datetime.datetime(2021, 4, 7, 13, 48, tzinfo=tzfile('/usr/share/zoneinfo/US/Pacific'))
     |          >>> arrow.Arrow.fromdatetime(dt)
     |          <Arrow [2021-04-07T13:48:00-07:00]>
     |
     |  ffrroommoorrddiinnaall(ordinal: int) -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object corresponding
     |          to the Gregorian Ordinal.
     |
     |      :param ordinal: an ``int`` corresponding to a Gregorian Ordinal.
     |
     |      Usage::
     |
     |          >>> arrow.fromordinal(737741)
     |          <Arrow [2020-11-12T00:00:00+00:00]>
     |
     |  ffrroommttiimmeessttaammpp(timestamp: Union[int, float, str], tzinfo: Union[datetime.tzinfo, str, NoneType] = None) -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object from a timestamp, converted to
     |      the given timezone.
     |
     |      :param timestamp: an ``int`` or ``float`` timestamp, or a ``str`` that converts to either.
     |      :param tzinfo: (optional) a ``tzinfo`` object.  Defaults to local time.
     |
     |  iinntteerrvvaall(frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters'], start: datetime.datetime, end: datetime.datetime, interval: int = 1, tz: Union[datetime.tzinfo, str, NoneType] = None, bounds: Literal['[)', '()', '(]', '[]'] = '[)', exact: bool = False) -> Iterable[Tuple[ForwardRef('Arrow'), ForwardRef('Arrow')]] from builtins.type
     |      Returns an iterator of tuples, each :class:`Arrow <arrow.arrow.Arrow>` objects,
     |      representing a series of intervals between two inputs.
     |
     |      :param frame: The timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |      :param start: A datetime expression, the start of the range.
     |      :param end: (optional) A datetime expression, the end of the range.
     |      :param interval: (optional) Time interval for the given time frame.
     |      :param tz: (optional) A timezone expression.  Defaults to UTC.
     |      :param bounds: (optional) a ``str`` of either '()', '(]', '[)', or '[]' that specifies
     |          whether to include or exclude the start and end values in the intervals. '(' excludes
     |          the start, '[' includes the start, ')' excludes the end, and ']' includes the end.
     |          If the bounds are not specified, the default bound '[)' is used.
     |      :param exact: (optional) whether to have the first timespan start exactly
     |          at the time specified by ``start`` and the final interval truncated
     |          so as not to extend beyond ``end``.
     |
     |      Supported frame values: year, quarter, month, week, day, hour, minute, second
     |
     |      Recognized datetime expressions:
     |
     |          - An :class:`Arrow <arrow.arrow.Arrow>` object.
     |          - A ``datetime`` object.
     |
     |      Recognized timezone expressions:
     |
     |          - A ``tzinfo`` object.
     |          - A ``str`` describing a timezone, similar to 'US/Pacific', or 'Europe/Berlin'.
     |          - A ``str`` in ISO 8601 style, as in '+07:00'.
     |          - A ``str``, one of the following:  'local', 'utc', 'UTC'.
     |
     |      Usage:
     |
     |          >>> start = datetime(2013, 5, 5, 12, 30)
     |          >>> end = datetime(2013, 5, 5, 17, 15)
     |          >>> for r in arrow.Arrow.interval('hour', start, end, 2):
     |          ...     print(r)
     |          ...
     |          (<Arrow [2013-05-05T12:00:00+00:00]>, <Arrow [2013-05-05T13:59:59.999999+00:00]>)
     |          (<Arrow [2013-05-05T14:00:00+00:00]>, <Arrow [2013-05-05T15:59:59.999999+00:00]>)
     |          (<Arrow [2013-05-05T16:00:00+00:00]>, <Arrow [2013-05-05T17:59:59.999999+00:0]>)
     |
     |  nnooww(tzinfo: Optional[datetime.tzinfo] = None) -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object, representing "now" in the given
     |      timezone.
     |
     |      :param tzinfo: (optional) a ``tzinfo`` object. Defaults to local time.
     |
     |      Usage::
     |
     |          >>> arrow.now('Asia/Baku')
     |          <Arrow [2019-01-24T20:26:31.146412+04:00]>
     |
     |  rraannggee(frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters'], start: Union[ForwardRef('Arrow'), datetime.datetime], end: Union[ForwardRef('Arrow'), datetime.datetime, NoneType] = None, tz: Union[datetime.tzinfo, str, NoneType] = None, limit: Optional[int] = None) -> Generator[ForwardRef('Arrow'), NoneType, NoneType] from builtins.type
     |      Returns an iterator of :class:`Arrow <arrow.arrow.Arrow>` objects, representing
     |      points in time between two inputs.
     |
     |      :param frame: The timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |      :param start: A datetime expression, the start of the range.
     |      :param end: (optional) A datetime expression, the end of the range.
     |      :param tz: (optional) A :ref:`timezone expression <tz-expr>`.  Defaults to
     |          ``start``'s timezone, or UTC if ``start`` is naive.
     |      :param limit: (optional) A maximum number of tuples to return.
     |
     |      **NOTE**: The ``end`` or ``limit`` must be provided.  Call with ``end`` alone to
     |      return the entire range.  Call with ``limit`` alone to return a maximum # of results from
     |      the start.  Call with both to cap a range at a maximum # of results.
     |
     |      **NOTE**: ``tz`` internally **replaces** the timezones of both ``start`` and ``end`` before
     |      iterating.  As such, either call with naive objects and ``tz``, or aware objects from the
     |      same timezone and no ``tz``.
     |
     |      Supported frame values: year, quarter, month, week, day, hour, minute, second, microsecond.
     |
     |      Recognized datetime expressions:
     |
     |          - An :class:`Arrow <arrow.arrow.Arrow>` object.
     |          - A ``datetime`` object.
     |
     |      Usage::
     |
     |          >>> start = datetime(2013, 5, 5, 12, 30)
     |          >>> end = datetime(2013, 5, 5, 17, 15)
     |          >>> for r in arrow.Arrow.range('hour', start, end):
     |          ...     print(repr(r))
     |          ...
     |          <Arrow [2013-05-05T12:30:00+00:00]>
     |          <Arrow [2013-05-05T13:30:00+00:00]>
     |          <Arrow [2013-05-05T14:30:00+00:00]>
     |          <Arrow [2013-05-05T15:30:00+00:00]>
     |          <Arrow [2013-05-05T16:30:00+00:00]>
     |
     |      **NOTE**: Unlike Python's ``range``, ``end`` *may* be included in the returned iterator::
     |
     |          >>> start = datetime(2013, 5, 5, 12, 30)
     |          >>> end = datetime(2013, 5, 5, 13, 30)
     |          >>> for r in arrow.Arrow.range('hour', start, end):
     |          ...     print(repr(r))
     |          ...
     |          <Arrow [2013-05-05T12:30:00+00:00]>
     |          <Arrow [2013-05-05T13:30:00+00:00]>
     |
     |  ssppaann__rraannggee(frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters'], start: datetime.datetime, end: datetime.datetime, tz: Union[datetime.tzinfo, str, NoneType] = None, limit: Optional[int] = None, bounds: Literal['[)', '()', '(]', '[]'] = '[)', exact: bool = False) -> Iterable[Tuple[ForwardRef('Arrow'), ForwardRef('Arrow')]] from builtins.type
     |      Returns an iterator of tuples, each :class:`Arrow <arrow.arrow.Arrow>` objects,
     |      representing a series of timespans between two inputs.
     |
     |      :param frame: The timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |      :param start: A datetime expression, the start of the range.
     |      :param end: (optional) A datetime expression, the end of the range.
     |      :param tz: (optional) A :ref:`timezone expression <tz-expr>`.  Defaults to
     |          ``start``'s timezone, or UTC if ``start`` is naive.
     |      :param limit: (optional) A maximum number of tuples to return.
     |      :param bounds: (optional) a ``str`` of either '()', '(]', '[)', or '[]' that specifies
     |          whether to include or exclude the start and end values in each span in the range. '(' excludes
     |          the start, '[' includes the start, ')' excludes the end, and ']' includes the end.
     |          If the bounds are not specified, the default bound '[)' is used.
     |      :param exact: (optional) whether to have the first timespan start exactly
     |          at the time specified by ``start`` and the final span truncated
     |          so as not to extend beyond ``end``.
     |
     |      **NOTE**: The ``end`` or ``limit`` must be provided.  Call with ``end`` alone to
     |      return the entire range.  Call with ``limit`` alone to return a maximum # of results from
     |      the start.  Call with both to cap a range at a maximum # of results.
     |
     |      **NOTE**: ``tz`` internally **replaces** the timezones of both ``start`` and ``end`` before
     |      iterating.  As such, either call with naive objects and ``tz``, or aware objects from the
     |      same timezone and no ``tz``.
     |
     |      Supported frame values: year, quarter, month, week, day, hour, minute, second, microsecond.
     |
     |      Recognized datetime expressions:
     |
     |          - An :class:`Arrow <arrow.arrow.Arrow>` object.
     |          - A ``datetime`` object.
     |
     |      **NOTE**: Unlike Python's ``range``, ``end`` will *always* be included in the returned
     |      iterator of timespans.
     |
     |      Usage:
     |
     |          >>> start = datetime(2013, 5, 5, 12, 30)
     |          >>> end = datetime(2013, 5, 5, 17, 15)
     |          >>> for r in arrow.Arrow.span_range('hour', start, end):
     |          ...     print(r)
     |          ...
     |          (<Arrow [2013-05-05T12:00:00+00:00]>, <Arrow [2013-05-05T12:59:59.999999+00:00]>)
     |          (<Arrow [2013-05-05T13:00:00+00:00]>, <Arrow [2013-05-05T13:59:59.999999+00:00]>)
     |          (<Arrow [2013-05-05T14:00:00+00:00]>, <Arrow [2013-05-05T14:59:59.999999+00:00]>)
     |          (<Arrow [2013-05-05T15:00:00+00:00]>, <Arrow [2013-05-05T15:59:59.999999+00:00]>)
     |          (<Arrow [2013-05-05T16:00:00+00:00]>, <Arrow [2013-05-05T16:59:59.999999+00:00]>)
     |          (<Arrow [2013-05-05T17:00:00+00:00]>, <Arrow [2013-05-05T17:59:59.999999+00:00]>)
     |
     |  ssttrrppttiimmee(date_str: str, fmt: str, tzinfo: Union[datetime.tzinfo, str, NoneType] = None) -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object from a date string and format,
     |      in the style of ``datetime.strptime``.  Optionally replaces the parsed timezone.
     |
     |      :param date_str: the date string.
     |      :param fmt: the format string using datetime format codes.
     |      :param tzinfo: (optional) A :ref:`timezone expression <tz-expr>`.  Defaults to the parsed
     |          timezone if ``fmt`` contains a timezone directive, otherwise UTC.
     |
     |      Usage::
     |
     |          >>> arrow.Arrow.strptime('20-01-2019 15:49:10', '%d-%m-%Y %H:%M:%S')
     |          <Arrow [2019-01-20T15:49:10+00:00]>
     |
     |  uuttccffrroommttiimmeessttaammpp(timestamp: Union[int, float, str]) -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object from a timestamp, in UTC time.
     |
     |      :param timestamp: an ``int`` or ``float`` timestamp, or a ``str`` that converts to either.
     |
     |  uuttccnnooww() -> 'Arrow' from builtins.type
     |      Constructs an :class:`Arrow <arrow.arrow.Arrow>` object, representing "now" in UTC
     |      time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow()
     |          <Arrow [2019-01-24T16:31:40.651108+00:00]>
     |
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |
     |  aammbbiigguuoouuss
     |      Indicates whether the :class:`Arrow <arrow.arrow.Arrow>` object is a repeated wall time in the current
     |      timezone.
     |
     |  ddaatteettiimmee
     |      Returns a datetime representation of the :class:`Arrow <arrow.arrow.Arrow>` object.
     |
     |      Usage::
     |
     |          >>> arw=arrow.utcnow()
     |          >>> arw.datetime
     |          datetime.datetime(2019, 1, 24, 16, 35, 27, 276649, tzinfo=tzutc())
     |
     |  ffllooaatt__ttiimmeessttaammpp
     |      Returns a floating-point timestamp representation of the :class:`Arrow <arrow.arrow.Arrow>`
     |      object, in UTC time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().float_timestamp
     |          1548260516.830896
     |
     |  ffoolldd
     |      Returns the ``fold`` value of the :class:`Arrow <arrow.arrow.Arrow>` object.
     |
     |  iimmaaggiinnaarryy
     |      Indicates whether the :class: `Arrow <arrow.arrow.Arrow>` object exists in the current timezone.
     |
     |  iinntt__ttiimmeessttaammpp
     |      Returns an integer timestamp representation of the :class:`Arrow <arrow.arrow.Arrow>` object, in
     |      UTC time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().int_timestamp
     |          1548260567
     |
     |  nnaaiivvee
     |      Returns a naive datetime representation of the :class:`Arrow <arrow.arrow.Arrow>`
     |      object.
     |
     |      Usage::
     |
     |          >>> nairobi = arrow.now('Africa/Nairobi')
     |          >>> nairobi
     |          <Arrow [2019-01-23T19:27:12.297999+03:00]>
     |          >>> nairobi.naive
     |          datetime.datetime(2019, 1, 23, 19, 27, 12, 297999)
     |
     |  ttzziinnffoo
     |      Gets the ``tzinfo`` of the :class:`Arrow <arrow.arrow.Arrow>` object.
     |
     |      Usage::
     |
     |          >>> arw=arrow.utcnow()
     |          >>> arw.tzinfo
     |          tzutc()
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  ____aannnnoottaattiioonnss____ = {'_ATTRS': typing.Final[typing.List[str]], '_ATTRS_P...
     |
     |  mmaaxx = <Arrow [9999-12-31T23:59:59.999999+00:00]>
     |
     |  mmiinn = <Arrow [0001-01-01T00:00:00+00:00]>
     |
     |  rreessoolluuttiioonn = datetime.timedelta(microseconds=1)

    class AArrrroowwFFaaccttoorryy(builtins.object)
     |  ArrowFactory(type: Type[arrow.arrow.Arrow] = <class 'arrow.arrow.Arrow'>) -> None
     |
     |  A factory for generating :class:`Arrow <arrow.arrow.Arrow>` objects.
     |
     |  :param type: (optional) the :class:`Arrow <arrow.arrow.Arrow>`-based class to construct from.
     |      Defaults to :class:`Arrow <arrow.arrow.Arrow>`.
     |
     |  Methods defined here:
     |
     |  ____iinniitt____(self, type: Type[arrow.arrow.Arrow] = <class 'arrow.arrow.Arrow'>) -> None
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ggeett(self, *args: Any, **kwargs: Any) -> arrow.arrow.Arrow
     |      Returns an :class:`Arrow <arrow.arrow.Arrow>` object based on flexible inputs.
     |
     |      :param locale: (optional) a ``str`` specifying a locale for the parser. Defaults to 'en-us'.
     |      :param tzinfo: (optional) a :ref:`timezone expression <tz-expr>` or tzinfo object.
     |          Replaces the timezone unless using an input form that is explicitly UTC or specifies
     |          the timezone in a positional argument. Defaults to UTC.
     |      :param normalize_whitespace: (optional) a ``bool`` specifying whether or not to normalize
     |          redundant whitespace (spaces, tabs, and newlines) in a datetime string before parsing.
     |          Defaults to false.
     |
     |      Usage::
     |
     |          >>> import arrow
     |
     |      **No inputs** to get current UTC time::
     |
     |          >>> arrow.get()
     |          <Arrow [2013-05-08T05:51:43.316458+00:00]>
     |
     |      **One** :class:`Arrow <arrow.arrow.Arrow>` object, to get a copy.
     |
     |          >>> arw = arrow.utcnow()
     |          >>> arrow.get(arw)
     |          <Arrow [2013-10-23T15:21:54.354846+00:00]>
     |
     |      **One** ``float`` or ``int``, convertible to a floating-point timestamp, to get
     |      that timestamp in UTC::
     |
     |          >>> arrow.get(1367992474.293378)
     |          <Arrow [2013-05-08T05:54:34.293378+00:00]>
     |
     |          >>> arrow.get(1367992474)
     |          <Arrow [2013-05-08T05:54:34+00:00]>
     |
     |      **One** ISO 8601-formatted ``str``, to parse it::
     |
     |          >>> arrow.get('2013-09-29T01:26:43.830580')
     |          <Arrow [2013-09-29T01:26:43.830580+00:00]>
     |
     |      **One** ISO 8601-formatted ``str``, in basic format, to parse it::
     |
     |          >>> arrow.get('20160413T133656.456289')
     |          <Arrow [2016-04-13T13:36:56.456289+00:00]>
     |
     |      **One** ``tzinfo``, to get the current time **converted** to that timezone::
     |
     |          >>> arrow.get(tz.tzlocal())
     |          <Arrow [2013-05-07T22:57:28.484717-07:00]>
     |
     |      **One** naive ``datetime``, to get that datetime in UTC::
     |
     |          >>> arrow.get(datetime(2013, 5, 5))
     |          <Arrow [2013-05-05T00:00:00+00:00]>
     |
     |      **One** aware ``datetime``, to get that datetime::
     |
     |          >>> arrow.get(datetime(2013, 5, 5, tzinfo=tz.tzlocal()))
     |          <Arrow [2013-05-05T00:00:00-07:00]>
     |
     |      **One** naive ``date``, to get that date in UTC::
     |
     |          >>> arrow.get(date(2013, 5, 5))
     |          <Arrow [2013-05-05T00:00:00+00:00]>
     |
     |      **One** time.struct time::
     |
     |          >>> arrow.get(gmtime(0))
     |          <Arrow [1970-01-01T00:00:00+00:00]>
     |
     |      **One** iso calendar ``tuple``, to get that week date in UTC::
     |
     |          >>> arrow.get((2013, 18, 7))
     |          <Arrow [2013-05-05T00:00:00+00:00]>
     |
     |      **Two** arguments, a naive or aware ``datetime``, and a replacement
     |      :ref:`timezone expression <tz-expr>`::
     |
     |          >>> arrow.get(datetime(2013, 5, 5), 'US/Pacific')
     |          <Arrow [2013-05-05T00:00:00-07:00]>
     |
     |      **Two** arguments, a naive ``date``, and a replacement
     |      :ref:`timezone expression <tz-expr>`::
     |
     |          >>> arrow.get(date(2013, 5, 5), 'US/Pacific')
     |          <Arrow [2013-05-05T00:00:00-07:00]>
     |
     |      **Two** arguments, both ``str``, to parse the first according to the format of the second::
     |
     |          >>> arrow.get('2013-05-05 12:30:45 America/Chicago', 'YYYY-MM-DD HH:mm:ss ZZZ')
     |          <Arrow [2013-05-05T12:30:45-05:00]>
     |
     |      **Two** arguments, first a ``str`` to parse and second a ``list`` of formats to try::
     |
     |          >>> arrow.get('2013-05-05 12:30:45', ['MM/DD/YYYY', 'YYYY-MM-DD HH:mm:ss'])
     |          <Arrow [2013-05-05T12:30:45+00:00]>
     |
     |      **Three or more** arguments, as for the direct constructor of an ``Arrow`` object::
     |
     |          >>> arrow.get(2013, 5, 5, 12, 30, 45)
     |          <Arrow [2013-05-05T12:30:45+00:00]>
     |
     |  nnooww(self, tz: Union[datetime.tzinfo, str, NoneType] = None) -> arrow.arrow.Arrow
     |      Returns an :class:`Arrow <arrow.arrow.Arrow>` object, representing "now" in the given
     |      timezone.
     |
     |      :param tz: (optional) A :ref:`timezone expression <tz-expr>`.  Defaults to local time.
     |
     |      Usage::
     |
     |          >>> import arrow
     |          >>> arrow.now()
     |          <Arrow [2013-05-07T22:19:11.363410-07:00]>
     |
     |          >>> arrow.now('US/Pacific')
     |          <Arrow [2013-05-07T22:19:15.251821-07:00]>
     |
     |          >>> arrow.now('+02:00')
     |          <Arrow [2013-05-08T07:19:25.618646+02:00]>
     |
     |          >>> arrow.now('local')
     |          <Arrow [2013-05-07T22:19:39.130059-07:00]>
     |
     |  uuttccnnooww(self) -> arrow.arrow.Arrow
     |      Returns an :class:`Arrow <arrow.arrow.Arrow>` object, representing "now" in UTC time.
     |
     |      Usage::
     |
     |          >>> import arrow
     |          >>> arrow.utcnow()
     |          <Arrow [2013-05-08T05:19:07.018993+00:00]>
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  ____ddiicctt____
     |      dictionary for instance variables (if defined)
     |
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |
     |  ____aannnnoottaattiioonnss____ = {'type': typing.Type[arrow.arrow.Arrow]}

    class PPaarrsseerrEErrrroorr(builtins.ValueError)
     |  Method resolution order:
     |      ParserError
     |      builtins.ValueError
     |      builtins.Exception
     |      builtins.BaseException
     |      builtins.object
     |
     |  Data descriptors defined here:
     |
     |  ____wweeaakkrreeff____
     |      list of weak references to the object (if defined)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.ValueError:
     |
     |  ____iinniitt____(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Static methods inherited from builtins.ValueError:
     |
     |  ____nneeww____(*args, **kwargs) from builtins.type
     |      Create and return a new object.  See help(type) for accurate signature.
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from builtins.BaseException:
     |
     |  ____ddeellaattttrr____(self, name, /)
     |      Implement delattr(self, name).
     |
     |  ____ggeettaattttrriibbuuttee____(self, name, /)
     |      Return getattr(self, name).
     |
     |  ____rreedduuccee____(...)
     |      Helper for pickle.
     |
     |  ____rreepprr____(self, /)
     |      Return repr(self).
     |
     |  ____sseettaattttrr____(self, name, value, /)
     |      Implement setattr(self, name, value).
     |
     |  ____sseettssttaattee____(...)
     |
     |  ____ssttrr____(self, /)
     |      Return str(self).
     |
     |  aadddd__nnoottee(...)
     |      Exception.add_note(note) --
     |      add a note to the exception
     |
     |  wwiitthh__ttrraacceebbaacckk(...)
     |      Exception.with_traceback(tb) --
     |      set self.__traceback__ to tb and return self.
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from builtins.BaseException:
     |
     |  ____ccaauussee____
     |      exception cause
     |
     |  ____ccoonntteexxtt____
     |      exception context
     |
     |  ____ddiicctt____
     |
     |  ____ssuupppprreessss__ccoonntteexxtt____
     |
     |  ____ttrraacceebbaacckk____
     |
     |  aarrggss

FFUUNNCCTTIIOONNSS
    ggeett(*args: Any, **kwargs: Any) -> arrow.arrow.Arrow
        Returns an :class:`Arrow <arrow.arrow.Arrow>` object based on flexible inputs.

        :param locale: (optional) a ``str`` specifying a locale for the parser. Defaults to 'en-us'.
        :param tzinfo: (optional) a :ref:`timezone expression <tz-expr>` or tzinfo object.
            Replaces the timezone unless using an input form that is explicitly UTC or specifies
            the timezone in a positional argument. Defaults to UTC.
        :param normalize_whitespace: (optional) a ``bool`` specifying whether or not to normalize
            redundant whitespace (spaces, tabs, and newlines) in a datetime string before parsing.
            Defaults to false.

        Usage::

            >>> import arrow

        **No inputs** to get current UTC time::

            >>> arrow.get()
            <Arrow [2013-05-08T05:51:43.316458+00:00]>

        **One** :class:`Arrow <arrow.arrow.Arrow>` object, to get a copy.

            >>> arw = arrow.utcnow()
            >>> arrow.get(arw)
            <Arrow [2013-10-23T15:21:54.354846+00:00]>

        **One** ``float`` or ``int``, convertible to a floating-point timestamp, to get
        that timestamp in UTC::

            >>> arrow.get(1367992474.293378)
            <Arrow [2013-05-08T05:54:34.293378+00:00]>

            >>> arrow.get(1367992474)
            <Arrow [2013-05-08T05:54:34+00:00]>

        **One** ISO 8601-formatted ``str``, to parse it::

            >>> arrow.get('2013-09-29T01:26:43.830580')
            <Arrow [2013-09-29T01:26:43.830580+00:00]>

        **One** ISO 8601-formatted ``str``, in basic format, to parse it::

            >>> arrow.get('20160413T133656.456289')
            <Arrow [2016-04-13T13:36:56.456289+00:00]>

        **One** ``tzinfo``, to get the current time **converted** to that timezone::

            >>> arrow.get(tz.tzlocal())
            <Arrow [2013-05-07T22:57:28.484717-07:00]>

        **One** naive ``datetime``, to get that datetime in UTC::

            >>> arrow.get(datetime(2013, 5, 5))
            <Arrow [2013-05-05T00:00:00+00:00]>

        **One** aware ``datetime``, to get that datetime::

            >>> arrow.get(datetime(2013, 5, 5, tzinfo=tz.tzlocal()))
            <Arrow [2013-05-05T00:00:00-07:00]>

        **One** naive ``date``, to get that date in UTC::

            >>> arrow.get(date(2013, 5, 5))
            <Arrow [2013-05-05T00:00:00+00:00]>

        **One** time.struct time::

            >>> arrow.get(gmtime(0))
            <Arrow [1970-01-01T00:00:00+00:00]>

        **One** iso calendar ``tuple``, to get that week date in UTC::

            >>> arrow.get((2013, 18, 7))
            <Arrow [2013-05-05T00:00:00+00:00]>

        **Two** arguments, a naive or aware ``datetime``, and a replacement
        :ref:`timezone expression <tz-expr>`::

            >>> arrow.get(datetime(2013, 5, 5), 'US/Pacific')
            <Arrow [2013-05-05T00:00:00-07:00]>

        **Two** arguments, a naive ``date``, and a replacement
        :ref:`timezone expression <tz-expr>`::

            >>> arrow.get(date(2013, 5, 5), 'US/Pacific')
            <Arrow [2013-05-05T00:00:00-07:00]>

        **Two** arguments, both ``str``, to parse the first according to the format of the second::

            >>> arrow.get('2013-05-05 12:30:45 America/Chicago', 'YYYY-MM-DD HH:mm:ss ZZZ')
            <Arrow [2013-05-05T12:30:45-05:00]>

        **Two** arguments, first a ``str`` to parse and second a ``list`` of formats to try::

            >>> arrow.get('2013-05-05 12:30:45', ['MM/DD/YYYY', 'YYYY-MM-DD HH:mm:ss'])
            <Arrow [2013-05-05T12:30:45+00:00]>

        **Three or more** arguments, as for the direct constructor of an ``Arrow`` object::

            >>> arrow.get(2013, 5, 5, 12, 30, 45)
            <Arrow [2013-05-05T12:30:45+00:00]>

    nnooww(tz: Union[datetime.tzinfo, str, NoneType] = None) -> arrow.arrow.Arrow
        Returns an :class:`Arrow <arrow.arrow.Arrow>` object, representing "now" in the given
        timezone.

        :param tz: (optional) A :ref:`timezone expression <tz-expr>`.  Defaults to local time.

        Usage::

            >>> import arrow
            >>> arrow.now()
            <Arrow [2013-05-07T22:19:11.363410-07:00]>

            >>> arrow.now('US/Pacific')
            <Arrow [2013-05-07T22:19:15.251821-07:00]>

            >>> arrow.now('+02:00')
            <Arrow [2013-05-08T07:19:25.618646+02:00]>

            >>> arrow.now('local')
            <Arrow [2013-05-07T22:19:39.130059-07:00]>

    uuttccnnooww() -> arrow.arrow.Arrow
        Returns an :class:`Arrow <arrow.arrow.Arrow>` object, representing "now" in UTC time.

        Usage::

            >>> import arrow
            >>> arrow.utcnow()
            <Arrow [2013-05-08T05:19:07.018993+00:00]>

DDAATTAA
    FFOORRMMAATT__AATTOOMM = 'YYYY-MM-DD HH:mm:ssZZ'
    FFOORRMMAATT__CCOOOOKKIIEE = 'dddd, DD-MMM-YYYY HH:mm:ss ZZZ'
    FFOORRMMAATT__RRFFCC11003366 = 'ddd, DD MMM YY HH:mm:ss Z'
    FFOORRMMAATT__RRFFCC11112233 = 'ddd, DD MMM YYYY HH:mm:ss Z'
    FFOORRMMAATT__RRFFCC22882222 = 'ddd, DD MMM YYYY HH:mm:ss Z'
    FFOORRMMAATT__RRFFCC33333399 = 'YYYY-MM-DD HH:mm:ssZZ'
    FFOORRMMAATT__RRFFCC882222 = 'ddd, DD MMM YY HH:mm:ss Z'
    FFOORRMMAATT__RRFFCC885500 = 'dddd, DD-MMM-YY HH:mm:ss ZZZ'
    FFOORRMMAATT__RRSSSS = 'ddd, DD MMM YYYY HH:mm:ss Z'
    FFOORRMMAATT__WW33CC = 'YYYY-MM-DD HH:mm:ssZZ'
    ____aallll____ = ['__version__', 'get', 'now', 'utcnow', 'Arrow', 'ArrowFacto...

VVEERRSSIIOONN
    1.3.0

FFIILLEE
    /home/ubuntu/.local/lib/python3.12/site-packages/arrow/__init__.py

