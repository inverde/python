Help on package arrow:

NNAAMMEE
    arrow

PPAACCKKAAGGEE  CCOONNTTEENNTTSS
    _version
    api
    arrow
    constants
    factory
    formatter
    locales
    parser
    util

CCLLAASSSSEESS
    builtins.ValueError(builtins.Exception)
        arrow.parser.ParserError
    builtins.object
        arrow.arrow.Arrow
        arrow.factory.ArrowFactory

    class AArrrrooww(builtins.object)
     |  Arrow(year: int, month: int, day: int, hour: int = 0, minute: int = 0, second: int = 0, microsecond: int = 0, tzinfo: Union[datetime.tzinfo, str, NoneType] = None, **kwargs: Any) -> None
     |
     |  An :class:`Arrow <arrow.arrow.Arrow>` object.
     |
     |  Implements the ``datetime`` interface, behaving as an aware ``datetime`` while implementing
     |  additional functionality.
     |
     |  :param year: the calendar year.
     |  :param month: the calendar month.
     |  :param day: the calendar day.
     |  :param hour: (optional) the hour. Defaults to 0.
     |  :param minute: (optional) the minute, Defaults to 0.
     |  :param second: (optional) the second, Defaults to 0.
     |  :param microsecond: (optional) the microsecond. Defaults to 0.
     |  :param tzinfo: (optional) A timezone expression.  Defaults to UTC.
     |  :param fold: (optional) 0 or 1, used to disambiguate repeated wall times. Defaults to 0.
     |
     |  .. _tz-expr:
     |
     |  Recognized timezone expressions:
     |
     |      - A ``tzinfo`` object.
     |      - A ``str`` describing a timezone, similar to 'US/Pacific', or 'Europe/Berlin'.
     |      - A ``str`` in ISO 8601 style, as in '+07:00'.
     |      - A ``str``, one of the following:  'local', 'utc', 'UTC'.
     |
     |  Usage::
     |
     |      >>> import arrow
     |      >>> arrow.Arrow(2013, 5, 5, 12, 30, 45)
     |      <Arrow [2013-05-05T12:30:45+00:00]>
     |
     |  Methods defined here:
     |
     |  ____aadddd____(self, other: Any) -> 'Arrow'
     |
     |  ____eeqq____(self, other: Any) -> bool
     |      Return self==value.
     |
     |  ____ffoorrmmaatt____(self, formatstr: str) -> str
     |      Default object formatter.
     |
     |      Return str(self) if format_spec is empty. Raise TypeError otherwise.
     |
     |  ____ggee____(self, other: Any) -> bool
     |      Return self>=value.
     |
     |  ____ggeettaattttrr____(self, name: str) -> int
     |
     |  ____ggtt____(self, other: Any) -> bool
     |      Return self>value.
     |
     |  ____hhaasshh____(self) -> int
     |      Return hash(self).
     |
     |  ____iinniitt____(self, year: int, month: int, day: int, hour: int = 0, minute: int = 0, second: int = 0, microsecond: int = 0, tzinfo: Union[datetime.tzinfo, str, NoneType] = None, **kwargs: Any) -> None
     |      Initialize self.  See help(type(self)) for accurate signature.
     |
     |  ____llee____(self, other: Any) -> bool
     |      Return self<=value.
     |
     |  ____lltt____(self, other: Any) -> bool
     |      Return self<value.
     |
     |  ____nnee____(self, other: Any) -> bool
     |      Return self!=value.
     |
     |  ____rraadddd____(self, other: Union[datetime.timedelta, dateutil.relativedelta.relativedelta]) -> 'Arrow'
     |
     |  ____rreepprr____(self) -> str
     |      Return repr(self).
     |
     |  ____rrssuubb____(self, other: Any) -> datetime.timedelta
     |
     |  ____ssttrr____(self) -> str
     |      Return str(self).
     |
     |  ____ssuubb____(self, other: Any) -> Union[datetime.timedelta, ForwardRef('Arrow')]
     |
     |  aassttiimmeezzoonnee(self, tz: Optional[datetime.tzinfo]) -> datetime.datetime
     |      Returns a ``datetime`` object, converted to the specified timezone.
     |
     |      :param tz: a ``tzinfo`` object.
     |
     |      Usage::
     |
     |          >>> pacific=arrow.now('US/Pacific')
     |          >>> nyc=arrow.now('America/New_York').tzinfo
     |          >>> pacific.astimezone(nyc)
     |          datetime.datetime(2019, 1, 20, 10, 24, 22, 328172, tzinfo=tzfile('/usr/share/zoneinfo/America/New_York'))
     |
     |  cceeiill(self, frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters']) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, representing the "ceiling"
     |      of the timespan of the :class:`Arrow <arrow.arrow.Arrow>` object in a given timeframe.
     |      Equivalent to the second element in the 2-tuple returned by
     |      :func:`span <arrow.arrow.Arrow.span>`.
     |
     |      :param frame: the timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().ceil('hour')
     |          <Arrow [2013-05-09T03:59:59.999999+00:00]>
     |
     |  cclloonnee(self) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, cloned from the current one.
     |
     |      Usage:
     |
     |          >>> arw = arrow.utcnow()
     |          >>> cloned = arw.clone()
     |
     |  ccttiimmee(self) -> str
     |      Returns a ctime formatted representation of the date and time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().ctime()
     |          'Sat Jan 19 18:26:50 2019'
     |
     |  ddaattee(self) -> datetime.date
     |      Returns a ``date`` object with the same year, month and day.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().date()
     |          datetime.date(2019, 1, 23)
     |
     |  ddeehhuummaanniizzee(self, input_string: str, locale: str = 'en_us') -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, that represents
     |      the time difference relative to the attributes of the
     |      :class:`Arrow <arrow.arrow.Arrow>` object.
     |
     |      :param timestring: a ``str`` representing a humanized relative time.
     |      :param locale: (optional) a ``str`` specifying a locale.  Defaults to 'en-us'.
     |
     |      Usage::
     |
     |              >>> arw = arrow.utcnow()
     |              >>> arw
     |              <Arrow [2021-04-20T22:27:34.787885+00:00]>
     |              >>> earlier = arw.dehumanize("2 days ago")
     |              >>> earlier
     |              <Arrow [2021-04-18T22:27:34.787885+00:00]>
     |
     |              >>> arw = arrow.utcnow()
     |              >>> arw
     |              <Arrow [2021-04-20T22:27:34.787885+00:00]>
     |              >>> later = arw.dehumanize("in a month")
     |              >>> later
     |              <Arrow [2021-05-18T22:27:34.787885+00:00]>
     |
     |  ddsstt(self) -> Optional[datetime.timedelta]
     |      Returns the daylight savings time adjustment.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().dst()
     |          datetime.timedelta(0)
     |
     |  fflloooorr(self, frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters']) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object, representing the "floor"
     |      of the timespan of the :class:`Arrow <arrow.arrow.Arrow>` object in a given timeframe.
     |      Equivalent to the first element in the 2-tuple returned by
     |      :func:`span <arrow.arrow.Arrow.span>`.
     |
     |      :param frame: the timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().floor('hour')
     |          <Arrow [2013-05-09T03:00:00+00:00]>
     |
     |  ffoorr__jjssoonn(self) -> str
     |      Serializes for the ``for_json`` protocol of simplejson.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().for_json()
     |          '2019-01-19T18:25:36.760079+00:00'
     |
     |  ffoorrmmaatt(self, fmt: str = 'YYYY-MM-DD HH:mm:ssZZ', locale: str = 'en-us') -> str
     |      Returns a string representation of the :class:`Arrow <arrow.arrow.Arrow>` object,
     |      formatted according to the provided format string.
     |
     |      :param fmt: the format string.
     |      :param locale: the locale to format.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().format('YYYY-MM-DD HH:mm:ss ZZ')
     |          '2013-05-09 03:56:47 -00:00'
     |
     |          >>> arrow.utcnow().format('X')
     |          '1368071882'
     |
     |          >>> arrow.utcnow().format('MMMM DD, YYYY')
     |          'May 09, 2013'
     |
     |          >>> arrow.utcnow().format()
     |          '2013-05-09 03:56:47 -00:00'
     |
     |  hhuummaanniizzee(self, other: Union[ForwardRef('Arrow'), datetime.datetime, NoneType] = None, locale: str = 'en-us', only_distance: bool = False, granularity: Union[Literal['auto', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year'], List[Literal['auto', 'second', 'minute', 'hour', 'day', 'week', 'month', 'quarter', 'year']]] = 'auto') -> str
     |      Returns a localized, humanized representation of a relative difference in time.
     |
     |      :param other: (optional) an :class:`Arrow <arrow.arrow.Arrow>` or ``datetime`` object.
     |          Defaults to now in the current :class:`Arrow <arrow.arrow.Arrow>` object's timezone.
     |      :param locale: (optional) a ``str`` specifying a locale.  Defaults to 'en-us'.
     |      :param only_distance: (optional) returns only time difference eg: "11 seconds" without "in" or "ago" part.
     |      :param granularity: (optional) defines the precision of the output. Set it to strings 'second', 'minute',
     |                         'hour', 'day', 'week', 'month' or 'year' or a list of any combination of these strings
     |
     |      Usage::
     |
     |          >>> earlier = arrow.utcnow().shift(hours=-2)
     |          >>> earlier.humanize()
     |          '2 hours ago'
     |
     |          >>> later = earlier.shift(hours=4)
     |          >>> later.humanize(earlier)
     |          'in 4 hours'
     |
     |  iiss__bbeettwweeeenn(self, start: 'Arrow', end: 'Arrow', bounds: Literal['[)', '()', '(]', '[]'] = '()') -> bool
     |      Returns a boolean denoting whether the :class:`Arrow <arrow.arrow.Arrow>` object is between
     |      the start and end limits.
     |
     |      :param start: an :class:`Arrow <arrow.arrow.Arrow>` object.
     |      :param end: an :class:`Arrow <arrow.arrow.Arrow>` object.
     |      :param bounds: (optional) a ``str`` of either '()', '(]', '[)', or '[]' that specifies
     |          whether to include or exclude the start and end values in the range. '(' excludes
     |          the start, '[' includes the start, ')' excludes the end, and ']' includes the end.
     |          If the bounds are not specified, the default bound '()' is used.
     |
     |      Usage::
     |
     |          >>> start = arrow.get(datetime(2013, 5, 5, 12, 30, 10))
     |          >>> end = arrow.get(datetime(2013, 5, 5, 12, 30, 36))
     |          >>> arrow.get(datetime(2013, 5, 5, 12, 30, 27)).is_between(start, end)
     |          True
     |
     |          >>> start = arrow.get(datetime(2013, 5, 5))
     |          >>> end = arrow.get(datetime(2013, 5, 8))
     |          >>> arrow.get(datetime(2013, 5, 8)).is_between(start, end, '[]')
     |          True
     |
     |          >>> start = arrow.get(datetime(2013, 5, 5))
     |          >>> end = arrow.get(datetime(2013, 5, 8))
     |          >>> arrow.get(datetime(2013, 5, 8)).is_between(start, end, '[)')
     |          False
     |
     |  iissooccaalleennddaarr(self) -> Tuple[int, int, int]
     |      Returns a 3-tuple, (ISO year, ISO week number, ISO weekday).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().isocalendar()
     |          (2019, 3, 6)
     |
     |  iissooffoorrmmaatt(self, sep: str = 'T', timespec: str = 'auto') -> str
     |      Returns an ISO 8601 formatted representation of the date and time.
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().isoformat()
     |          '2019-01-19T18:30:52.442118+00:00'
     |
     |  iissoowweeeekkddaayy(self) -> int
     |      Returns the ISO day of the week as an integer (1-7).
     |
     |      Usage::
     |
     |          >>> arrow.utcnow().isoweekday()
     |          6
     |
     |  rreeppllaaccee(self, **kwargs: Any) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object with attributes updated
     |      according to inputs.
     |
     |      Use property names to set their value absolutely::
     |
     |          >>> import arrow
     |          >>> arw = arrow.utcnow()
     |          >>> arw
     |          <Arrow [2013-05-11T22:27:34.787885+00:00]>
     |          >>> arw.replace(year=2014, month=6)
     |          <Arrow [2014-06-11T22:27:34.787885+00:00]>
     |
     |      You can also replace the timezone without conversion, using a
     |      :ref:`timezone expression <tz-expr>`::
     |
     |          >>> arw.replace(tzinfo=tz.tzlocal())
     |          <Arrow [2013-05-11T22:27:34.787885-07:00]>
     |
     |  sshhiifftt(self, **kwargs: Any) -> 'Arrow'
     |      Returns a new :class:`Arrow <arrow.arrow.Arrow>` object with attributes updated
     |      according to inputs.
     |
     |      Use pluralized property names to relatively shift their current value:
     |
     |      >>> import arrow
     |      >>> arw = arrow.utcnow()
     |      >>> arw
     |      <Arrow [2013-05-11T22:27:34.787885+00:00]>
     |      >>> arw.shift(years=1, months=-1)
     |      <Arrow [2014-04-11T22:27:34.787885+00:00]>
     |
     |      Day-of-the-week relative shifting can use either Python's weekday numbers
     |      (Monday = 0, Tuesday = 1 .. Sunday = 6) or using dateutil.relativedelta's
     |      day instances (MO, TU .. SU).  When using weekday numbers, the returned
     |      date will always be greater than or equal to the starting date.
     |
     |      Using the above code (which is a Saturday) and asking it to shift to Saturday:
     |
     |      >>> arw.shift(weekday=5)
     |      <Arrow [2013-05-11T22:27:34.787885+00:00]>
     |
     |      While asking for a Monday:
     |
     |      >>> arw.shift(weekday=0)
     |      <Arrow [2013-05-13T22:27:34.787885+00:00]>
     |
     |  ssppaann(self, frame: Literal['year', 'years', 'month', 'months', 'day', 'days', 'hour', 'hours', 'minute', 'minutes', 'second', 'seconds', 'microsecond', 'microseconds', 'week', 'weeks', 'quarter', 'quarters'], count: int = 1, bounds: Literal['[)', '()', '(]', '[]'] = '[)', exact: bool = False, week_start: int = 1) -> Tuple[ForwardRef('Arrow'), ForwardRef('Arrow')]
     |      Returns a tuple of two new :class:`Arrow <arrow.arrow.Arrow>` objects, representing the timespan
     |      of the :class:`Arrow <arrow.arrow.Arrow>` object in a given timeframe.
     |
     |      :param frame: the timeframe.  Can be any ``datetime`` property (day, hour, minute...).
     |      :param count: (optional) the number of frames to span.
     |      :param bounds: (optional) a ``str`` of either '()', '(]', '[)', or '[]' that specifies
     |          whether to include or exclude the start and end values in the span. '(' excludes
     |          the start, '[' includes the start, ')' excludes the end, and ']' includes the end.
     |          If the bounds are not specified, the default bound '[)' is used.
     |      :param exact: (optional) whether to have the start of the timespan begin exactly
     |          at the time specified by ``start`` and the end of the timespan truncated
     |          so as not to extend beyond ``end``.
     |      :param week_start: (optional) only used in combination with the week timeframe. Follows isoweekday() where
     |          Monday is 1 and Sunday is 7.
     |
     |      Supported frame values: year, quarter, month, week, day, hour, minute, second.
     |
     |      Usage::
     |
     |        